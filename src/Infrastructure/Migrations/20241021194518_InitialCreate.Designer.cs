// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20241021194518_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.InstallmentAggregate.Installment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AmountPerPayment")
                        .HasColumnType("real")
                        .HasColumnName("amount_per_payment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<int>("QuantityPayments")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_payments");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("installments", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAggregate.Entities.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("order_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4010), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pending",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4387), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4656), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "paid",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4656), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4658), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "shipped",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4658), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4660), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "delivered",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4661), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4662), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "canceled",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 419, DateTimeKind.Unspecified).AddTicks(4662), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order_status");

                    b.Property<float>("Total")
                        .HasColumnType("real")
                        .HasColumnName("total");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_methods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7968), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "credit_card",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7971), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7991), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pix",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7991), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7992), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "bank_transfer",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7993), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7995), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "cash",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 434, DateTimeKind.Unspecified).AddTicks(7995), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Entities.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4767), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pending",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4775), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4782), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "completed",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4783), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4784), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "failed",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4785), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4786), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "refunded",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 436, DateTimeKind.Unspecified).AddTicks(4786), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("InstallmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_installment");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_payment_method");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_payment_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAggregate.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("product_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6282), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "electronics",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6285), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6293), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "homeappliances",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6293), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6295), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "fashion",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6295), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6297), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "footwear",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6297), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6298), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "beauty",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6299), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6300), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "health_wellness",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6300), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6302), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "groceries",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6302), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6304), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "furniture",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6304), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6306), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "toys_games",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6306), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6307), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "books_stationery",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6307), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6308), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "sports_outdoor",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6309), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6310), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "automotive",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6310), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6311), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pet_supplies",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6311), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6312), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "jewelry_watches",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6313), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6314), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "office_supplies",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6314), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6315), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "home_improvement",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6315), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6377), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "baby_products",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6378), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6379), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "travel_luggage",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6379), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6380), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "music_instruments",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 439, DateTimeKind.Unspecified).AddTicks(6380), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product_category");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<int?>("StarRating")
                        .HasColumnType("integer")
                        .HasColumnName("star_rating");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("subject");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("product_feedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Entities.ShipmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("shipment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8601), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pending",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8604), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8611), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "shipped",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8611), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8613), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "in_route",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8613), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8615), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "delivered",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8616), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8652), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "canceled",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 489, DateTimeKind.Unspecified).AddTicks(8653), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Accountable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountable");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ShipmentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_shipment_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ShipmentStatusId");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 492, DateTimeKind.Unspecified).AddTicks(8258), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "customer",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 492, DateTimeKind.Unspecified).AddTicks(8258), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 492, DateTimeKind.Unspecified).AddTicks(8247), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "admin",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 21, 19, 45, 17, 492, DateTimeKind.Unspecified).AddTicks(8250), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.InstallmentAggregate.Installment", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.InstallmentAggregate.Installment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Entities.OrderStatus", null)
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("neighborhood");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("street");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("Domain.OrderAggregate.Entities.OrderDiscount", "OrderDiscounts", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("Id");

                            b1.HasIndex("id_order");

                            b1.ToTable("order_discounts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_order");

                            b1.OwnsOne("Domain.Common.ValueObjects.Discount", "Discount", b2 =>
                                {
                                    b2.Property<long>("OrderDiscountId")
                                        .HasColumnType("bigint")
                                        .HasColumnName("id");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(250)
                                        .HasColumnType("character varying(250)")
                                        .HasColumnName("description");

                                    b2.Property<DateTimeOffset>("EndingDate")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("ending_date");

                                    b2.Property<int>("Percentage")
                                        .HasColumnType("integer")
                                        .HasColumnName("percentage");

                                    b2.Property<DateTimeOffset>("StartingDate")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("starting_date");

                                    b2.HasKey("OrderDiscountId");

                                    b2.ToTable("order_discounts");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderDiscountId");
                                });

                            b1.Navigation("Discount")
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.OrderAggregate.Entities.OrderProduct", "OrderProducts", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<float>("PriceOnOrder")
                                .HasColumnType("real")
                                .HasColumnName("price_on_order");

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_order");

                            b1.ToTable("orders_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderStatusHistory", "OrderStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("OrderStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order_status");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("OrderStatusId");

                            b1.HasIndex("id_order");

                            b1.ToTable("order_status_histories", (string)null);

                            b1.HasOne("Domain.OrderAggregate.Entities.OrderStatus", null)
                                .WithMany()
                                .HasForeignKey("OrderStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("OrderDiscounts");

                    b.Navigation("OrderProducts");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.HasOne("Domain.InstallmentAggregate.Installment", null)
                        .WithMany()
                        .HasForeignKey("InstallmentId");

                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.PaymentAggregate.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentAggregate.Entities.PaymentMethod", null)
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentAggregate.Entities.PaymentStatus", null)
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.PaymentAggregate.ValueObjects.PaymentStatusHistory", "PaymentStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("PaymentStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_payment_status");

                            b1.Property<long>("id_payment")
                                .HasColumnType("bigint")
                                .HasColumnName("id_payment");

                            b1.HasKey("id");

                            b1.HasIndex("PaymentStatusId");

                            b1.HasIndex("id_payment");

                            b1.ToTable("payment_status_histories", (string)null);

                            b1.HasOne("Domain.PaymentAggregate.Entities.PaymentStatus", null)
                                .WithMany()
                                .HasForeignKey("PaymentStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_payment");
                        });

                    b.Navigation("PaymentStatusHistories");
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("Domain.ProductAggregate.Entities.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ProductAggregate.Entities.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<int>("QuantityAvailable")
                                .HasColumnType("integer")
                                .HasColumnName("quantity_available");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("Id");

                            b1.HasIndex("id_product")
                                .IsUnique();

                            b1.ToTable("inventories", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("Domain.ProductAggregate.Entities.ProductDiscount", "ProductDiscounts", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("Id");

                            b1.HasIndex("id_product");

                            b1.ToTable("product_discounts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");

                            b1.OwnsOne("Domain.Common.ValueObjects.Discount", "Discount", b2 =>
                                {
                                    b2.Property<long>("ProductDiscountId")
                                        .HasColumnType("bigint")
                                        .HasColumnName("id");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(250)
                                        .HasColumnType("character varying(250)")
                                        .HasColumnName("description");

                                    b2.Property<DateTimeOffset>("EndingDate")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("ending_date");

                                    b2.Property<int>("Percentage")
                                        .HasColumnType("integer")
                                        .HasColumnName("percentage");

                                    b2.Property<DateTimeOffset>("StartingDate")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("starting_date");

                                    b2.HasKey("ProductDiscountId");

                                    b2.ToTable("product_discounts");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductDiscountId");
                                });

                            b1.Navigation("Discount")
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.ProductAggregate.Entities.ProductImage", "ProductImages", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("Id");

                            b1.HasIndex("id_product");

                            b1.ToTable("product_images", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ProductFeedbackAggregate.ProductFeedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ProductAggregate.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ShipmentAggregate.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShipmentAggregate.Entities.ShipmentStatus", null)
                        .WithMany()
                        .HasForeignKey("ShipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.ShipmentAggregate.ValueObjects.ShipmentStatusHistory", "ShipmentStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("ShipmentStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment_status");

                            b1.Property<long>("id_shipment")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment");

                            b1.HasKey("id");

                            b1.HasIndex("ShipmentStatusId");

                            b1.HasIndex("id_shipment");

                            b1.ToTable("shipment_status_histories", (string)null);

                            b1.HasOne("Domain.ShipmentAggregate.Entities.ShipmentStatus", null)
                                .WithMany()
                                .HasForeignKey("ShipmentStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_shipment");
                        });

                    b.Navigation("ShipmentStatusHistories");
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("Domain.UserAggregate.Entities.UserAddress", "UserAddresses", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("Id");

                            b1.HasIndex("id_user");

                            b1.ToTable("user_addresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_user");

                            b1.OwnsOne("Domain.Common.ValueObjects.Address", "Address", b2 =>
                                {
                                    b2.Property<long>("UserAddressId")
                                        .HasColumnType("bigint")
                                        .HasColumnName("id");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(120)
                                        .HasColumnType("character varying(120)")
                                        .HasColumnName("city");

                                    b2.Property<string>("Neighborhood")
                                        .HasMaxLength(120)
                                        .HasColumnType("character varying(120)")
                                        .HasColumnName("neighborhood");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("character varying(10)")
                                        .HasColumnName("postal_code");

                                    b2.Property<string>("State")
                                        .IsRequired()
                                        .HasMaxLength(120)
                                        .HasColumnType("character varying(120)")
                                        .HasColumnName("state");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasMaxLength(120)
                                        .HasColumnType("character varying(120)")
                                        .HasColumnName("street");

                                    b2.HasKey("UserAddressId");

                                    b2.ToTable("user_addresses");

                                    b2.WithOwner()
                                        .HasForeignKey("UserAddressId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.UserAggregate.Entities.UserRole", "UserRoles", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("RoleId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_role");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("Id");

                            b1.HasIndex("RoleId");

                            b1.HasIndex("id_user");

                            b1.ToTable("users_roles", (string)null);

                            b1.HasOne("Domain.UserAggregate.Entities.Role", null)
                                .WithMany()
                                .HasForeignKey("RoleId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_user");
                        });

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
