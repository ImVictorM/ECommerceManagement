// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.OrderAggregate.Enumerations.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("order_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "paid"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "shipped"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "delivered"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "canceled"
                        });
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BaseTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("base_total");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Enumeration.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "in_progress"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "pending"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "approved"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "rejected"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "canceled"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "refunded"
                        });
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Installments")
                        .HasColumnType("integer")
                        .HasColumnName("installments");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_payment_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAggregate.Enumerations.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "electronics"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "home_appliances"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "fashion"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "footwear"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "beauty"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "health_wellness"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "groceries"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "furniture"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "toys_games"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "books_stationery"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "sports_outdoor"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "automotive"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "pet_supplies"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "jewelry_watches"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "office_supplies"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "home_improvement"
                        },
                        new
                        {
                            Id = 17L,
                            Name = "baby_products"
                        },
                        new
                        {
                            Id = 18L,
                            Name = "travel_luggage"
                        },
                        new
                        {
                            Id = 19L,
                            Name = "music_instruments"
                        });
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<int?>("StarRating")
                        .HasColumnType("integer")
                        .HasColumnName("star_rating");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("subject");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("product_feedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Entities.ShipmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("shipment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(335), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "pending",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(646), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1066), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "shipped",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1067), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1083), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "in_route",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1084), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1097), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "delivered",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1097), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1108), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "canceled",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 12, 3, 17, 33, 26, 556, DateTimeKind.Unspecified).AddTicks(1109), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Accountable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountable");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ShipmentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_shipment_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ShipmentStatusId");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SharedKernel.Authorization.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Enumerations.OrderStatus", null)
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SharedKernel.ValueObjects.Discount", "Discounts", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("description");

                            b1.Property<DateTimeOffset>("EndingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ending_date");

                            b1.Property<int>("Percentage")
                                .HasColumnType("integer")
                                .HasColumnName("percentage");

                            b1.Property<DateTimeOffset>("StartingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("starting_date");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("id_order");

                            b1.ToTable("order_discounts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderProduct", "Products", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_order");

                            b1.ToTable("orders_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderStatusHistory", "OrderStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("OrderStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order_status");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("OrderStatusId");

                            b1.HasIndex("id_order");

                            b1.ToTable("order_status_histories", (string)null);

                            b1.HasOne("Domain.OrderAggregate.Enumerations.OrderStatus", null)
                                .WithMany()
                                .HasForeignKey("OrderStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.Navigation("Discounts");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.PaymentAggregate.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentAggregate.Enumeration.PaymentStatus", null)
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.PaymentAggregate.ValueObjects.PaymentStatusHistory", "PaymentStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("PaymentStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_payment_status");

                            b1.Property<long>("id_payment")
                                .HasColumnType("bigint")
                                .HasColumnName("id_payment");

                            b1.HasKey("id");

                            b1.HasIndex("PaymentStatusId");

                            b1.HasIndex("id_payment");

                            b1.ToTable("payment_status_histories", (string)null);

                            b1.HasOne("Domain.PaymentAggregate.Enumeration.PaymentStatus", null)
                                .WithMany()
                                .HasForeignKey("PaymentStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_payment");
                        });

                    b.Navigation("PaymentStatusHistories");
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.OwnsOne("Domain.ProductAggregate.Entities.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<int>("QuantityAvailable")
                                .HasColumnType("integer")
                                .HasColumnName("quantity_available");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("Id");

                            b1.HasIndex("id_product")
                                .IsUnique();

                            b1.ToTable("inventories", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("SharedKernel.ValueObjects.Discount", "Discounts", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("description");

                            b1.Property<DateTimeOffset>("EndingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ending_date");

                            b1.Property<int>("Percentage")
                                .HasColumnType("integer")
                                .HasColumnName("percentage");

                            b1.Property<DateTimeOffset>("StartingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("starting_date");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("id");

                            b1.HasIndex("id_product");

                            b1.ToTable("product_discounts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("Domain.ProductAggregate.ValueObjects.ProductCategory", "ProductCategories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_category");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("id");

                            b1.HasIndex("CategoryId");

                            b1.HasIndex("id_product");

                            b1.ToTable("products_categories", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Enumerations.Category", null)
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("Domain.ProductAggregate.ValueObjects.ProductImage", "ProductImages", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("id");

                            b1.HasIndex("id_product");

                            b1.ToTable("product_images", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.Navigation("Discounts");

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ProductFeedbackAggregate.ProductFeedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ProductAggregate.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ShipmentAggregate.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShipmentAggregate.Entities.ShipmentStatus", null)
                        .WithMany()
                        .HasForeignKey("ShipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SharedKernel.ValueObjects.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<long>("ShipmentId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("neighborhood");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("street");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.OwnsMany("Domain.ShipmentAggregate.ValueObjects.ShipmentStatusHistory", "ShipmentStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("ShipmentStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment_status");

                            b1.Property<long>("id_shipment")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment");

                            b1.HasKey("id");

                            b1.HasIndex("ShipmentStatusId");

                            b1.HasIndex("id_shipment");

                            b1.ToTable("shipment_status_histories", (string)null);

                            b1.HasOne("Domain.ShipmentAggregate.Entities.ShipmentStatus", null)
                                .WithMany()
                                .HasForeignKey("ShipmentStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_shipment");
                        });

                    b.Navigation("DeliveryAddress")
                        .IsRequired();

                    b.Navigation("ShipmentStatusHistories");
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("SharedKernel.ValueObjects.Address", "UserAddresses", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("neighborhood");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("street");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("id");

                            b1.HasIndex("id_user");

                            b1.ToTable("user_addresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_user");
                        });

                    b.OwnsMany("Domain.UserAggregate.ValueObjects.UserRole", "UserRoles", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("RoleId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_role");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("id");

                            b1.HasIndex("RoleId");

                            b1.HasIndex("id_user");

                            b1.ToTable("users_roles", (string)null);

                            b1.HasOne("SharedKernel.Authorization.Role", null)
                                .WithMany()
                                .HasForeignKey("RoleId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_user");
                        });

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
