// <auto-generated />
using System;
using Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("CouponRestrictionSequence");

            modelBuilder.Entity("Application.Common.Security.Authorization.Roles.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Domain.CarrierAggregate.Carrier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("carriers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 3, 16, 37, 5, 615, DateTimeKind.Unspecified).AddTicks(8922), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "carrier@email.com",
                            Name = "ECommerceManagementCarrier",
                            PasswordHash = "2AB9F1E1CD7021A4CFB833DC0AA408D742F2A42C24AA6BCB010717779372B7D0-5DBA0451842A6D3A8D52F4D61E71D4AC",
                            Phone = "",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 3, 16, 37, 5, 615, DateTimeKind.Unspecified).AddTicks(8924), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Domain.CouponAggregate.Abstracts.CouponRestriction", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"CouponRestrictionSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("id"));

                    b.Property<long>("id_coupon")
                        .HasColumnType("bigint")
                        .HasColumnName("id_coupon");

                    b.HasKey("id");

                    b.HasIndex("id_coupon");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Domain.CouponAggregate.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AutoApply")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_apply");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("min_price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("integer")
                        .HasColumnName("usage_limit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("coupons", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAggregate.Enumerations.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("order_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Paid"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order_status");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_owner");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OwnerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Enumerations.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Authorized"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_payment_status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<int?>("StarRating")
                        .HasColumnType("integer")
                        .HasColumnName("star_rating");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("subject");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("product_feedback", (string)null);
                });

            modelBuilder.Entity("Domain.SaleAggregate.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Enumerations.ShipmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("shipment_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 1L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Preparing"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "InRoute"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Delivered"
                        });
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CarrierId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_carrier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_order");

                    b.Property<long>("ShippingMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_shipping_method");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("_shipmentStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_shipment_status");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("_shipmentStatusId");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("Domain.ShippingMethodAggregate.ShippingMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EstimatedDeliveryDays")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_delivery_days");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("shipping_methods", (string)null);
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 3, 16, 37, 5, 601, DateTimeKind.Unspecified).AddTicks(9778), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@email.com",
                            IsActive = true,
                            Name = "admin",
                            PasswordHash = "31DD8179456F94EA43DDC8998D0B32E8303EF693A764581E432A63CBE300DE75-1BB36DB393A95CA85F4A579E568BBC4C",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 2, 3, 16, 37, 5, 601, DateTimeKind.Unspecified).AddTicks(9783), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.CouponAggregate.ValueObjects.Restrictions.CategoryRestriction", b =>
                {
                    b.HasBaseType("Domain.CouponAggregate.Abstracts.CouponRestriction");

                    b.ToTable("restriction_categories", (string)null);
                });

            modelBuilder.Entity("Domain.CouponAggregate.ValueObjects.Restrictions.ProductRestriction", b =>
                {
                    b.HasBaseType("Domain.CouponAggregate.Abstracts.CouponRestriction");

                    b.ToTable("restriction_products", (string)null);
                });

            modelBuilder.Entity("Domain.CouponAggregate.Abstracts.CouponRestriction", b =>
                {
                    b.HasOne("Domain.CouponAggregate.Coupon", null)
                        .WithMany("Restrictions")
                        .HasForeignKey("id_coupon");
                });

            modelBuilder.Entity("Domain.CouponAggregate.Coupon", b =>
                {
                    b.OwnsOne("SharedKernel.ValueObjects.Discount", "Discount", b1 =>
                        {
                            b1.Property<long>("CouponId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("description");

                            b1.Property<DateTimeOffset>("EndingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ending_date");

                            b1.Property<int>("Percentage")
                                .HasColumnType("integer")
                                .HasColumnName("percentage");

                            b1.Property<DateTimeOffset>("StartingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("starting_date");

                            b1.HasKey("CouponId");

                            b1.ToTable("coupons");

                            b1.WithOwner()
                                .HasForeignKey("CouponId");
                        });

                    b.Navigation("Discount")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Enumerations.OrderStatus", null)
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderCoupon", "CouponsApplied", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("CouponId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_coupon");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("CouponId");

                            b1.HasIndex("id_order");

                            b1.ToTable("orders_coupons", (string)null);

                            b1.HasOne("Domain.CouponAggregate.Coupon", null)
                                .WithMany()
                                .HasForeignKey("CouponId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderProduct", "Products", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<decimal>("BasePrice")
                                .HasColumnType("numeric")
                                .HasColumnName("base_price");

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<decimal>("PurchasedPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("purchased_price");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_order");

                            b1.ToTable("orders_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");

                            b1.OwnsMany("Domain.CategoryAggregate.ValueObjects.CategoryId", "ProductCategoryIds", b2 =>
                                {
                                    b2.Property<long>("id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasColumnName("id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<long>("id"));

                                    b2.Property<long>("Value")
                                        .HasColumnType("bigint")
                                        .HasColumnName("value");

                                    b2.Property<long>("id_order_product")
                                        .HasColumnType("bigint")
                                        .HasColumnName("id_order_product");

                                    b2.HasKey("id");

                                    b2.HasIndex("id_order_product");

                                    b2.ToTable("order_product_category_ids", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("id_order_product");
                                });

                            b1.Navigation("ProductCategoryIds");
                        });

                    b.OwnsMany("Domain.OrderAggregate.ValueObjects.OrderStatusHistory", "OrderStatusHistories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("OrderStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order_status");

                            b1.Property<long>("id_order")
                                .HasColumnType("bigint")
                                .HasColumnName("id_order");

                            b1.HasKey("id");

                            b1.HasIndex("OrderStatusId");

                            b1.HasIndex("id_order");

                            b1.ToTable("order_status_histories", (string)null);

                            b1.HasOne("Domain.OrderAggregate.Enumerations.OrderStatus", null)
                                .WithMany()
                                .HasForeignKey("OrderStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_order");
                        });

                    b.Navigation("CouponsApplied");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.PaymentAggregate.Payment", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.PaymentAggregate.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentAggregate.Enumerations.PaymentStatus", null)
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ProductAggregate.Product", b =>
                {
                    b.OwnsOne("Domain.ProductAggregate.Entities.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<int>("QuantityAvailable")
                                .HasColumnType("integer")
                                .HasColumnName("quantity_available");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("Id");

                            b1.HasIndex("id_product")
                                .IsUnique();

                            b1.ToTable("inventories", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("Domain.ProductAggregate.ValueObjects.ProductCategory", "ProductCategories", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_category");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("id");

                            b1.HasIndex("CategoryId");

                            b1.HasIndex("id_product");

                            b1.ToTable("products_categories", (string)null);

                            b1.HasOne("Domain.CategoryAggregate.Category", null)
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.OwnsMany("Domain.ProductAggregate.ValueObjects.ProductImage", "ProductImages", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.Property<long>("id_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.HasKey("id");

                            b1.HasIndex("id_product");

                            b1.ToTable("product_images", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_product");
                        });

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Domain.ProductFeedbackAggregate.ProductFeedback", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ProductFeedbackAggregate.ProductFeedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ProductAggregate.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.SaleAggregate.Sale", b =>
                {
                    b.OwnsOne("SharedKernel.ValueObjects.Discount", "Discount", b1 =>
                        {
                            b1.Property<long>("SaleId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("description");

                            b1.Property<DateTimeOffset>("EndingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ending_date");

                            b1.Property<int>("Percentage")
                                .HasColumnType("integer")
                                .HasColumnName("percentage");

                            b1.Property<DateTimeOffset>("StartingDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("starting_date");

                            b1.HasKey("SaleId");

                            b1.ToTable("sales");

                            b1.WithOwner()
                                .HasForeignKey("SaleId");
                        });

                    b.OwnsMany("Domain.SaleAggregate.ValueObjects.ProductReference", "ProductsExcludedFromSale", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<long>("id_sale")
                                .HasColumnType("bigint")
                                .HasColumnName("id_sale");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_sale");

                            b1.ToTable("sale_excluded_products_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_sale");
                        });

                    b.OwnsMany("Domain.SaleAggregate.ValueObjects.ProductReference", "ProductsInSale", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<long>("id_sale")
                                .HasColumnType("bigint")
                                .HasColumnName("id_sale");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_sale");

                            b1.ToTable("sale_products_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_sale");
                        });

                    b.OwnsMany("Domain.SaleAggregate.ValueObjects.CategoryReference", "CategoriesInSale", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_category");

                            b1.Property<long>("id_sale")
                                .HasColumnType("bigint")
                                .HasColumnName("id_sale");

                            b1.HasKey("id");

                            b1.HasIndex("CategoryId");

                            b1.HasIndex("id_sale");

                            b1.ToTable("sale_categories_categories", (string)null);

                            b1.HasOne("Domain.CategoryAggregate.Category", null)
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_sale");
                        });

                    b.Navigation("CategoriesInSale");

                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("ProductsExcludedFromSale");

                    b.Navigation("ProductsInSale");
                });

            modelBuilder.Entity("Domain.ShipmentAggregate.Shipment", b =>
                {
                    b.HasOne("Domain.CarrierAggregate.Carrier", null)
                        .WithMany()
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithOne()
                        .HasForeignKey("Domain.ShipmentAggregate.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShippingMethodAggregate.ShippingMethod", null)
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShipmentAggregate.Enumerations.ShipmentStatus", null)
                        .WithMany()
                        .HasForeignKey("_shipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SharedKernel.ValueObjects.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<long>("ShipmentId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("neighborhood");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("street");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.OwnsMany("Domain.ShipmentAggregate.ValueObjects.ShipmentTrackingEntry", "ShipmentTrackingEntries", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<long>("_shipmentStatusId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment_status");

                            b1.Property<long>("id_shipment")
                                .HasColumnType("bigint")
                                .HasColumnName("id_shipment");

                            b1.HasKey("id");

                            b1.HasIndex("_shipmentStatusId");

                            b1.HasIndex("id_shipment");

                            b1.ToTable("shipment_tracking_entries", (string)null);

                            b1.HasOne("Domain.ShipmentAggregate.Enumerations.ShipmentStatus", null)
                                .WithMany()
                                .HasForeignKey("_shipmentStatusId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_shipment");
                        });

                    b.Navigation("DeliveryAddress")
                        .IsRequired();

                    b.Navigation("ShipmentTrackingEntries");
                });

            modelBuilder.Entity("Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("SharedKernel.ValueObjects.Address", "UserAddresses", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("city");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("neighborhood");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("street");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("id");

                            b1.HasIndex("id_user");

                            b1.ToTable("user_addresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id_user");
                        });

                    b.OwnsMany("Domain.UserAggregate.ValueObjects.UserRole", "UserRoles", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("RoleId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_role");

                            b1.Property<long>("id_user")
                                .HasColumnType("bigint")
                                .HasColumnName("id_user");

                            b1.HasKey("id");

                            b1.HasIndex("RoleId");

                            b1.HasIndex("id_user");

                            b1.ToTable("users_roles", (string)null);

                            b1.HasOne("Application.Common.Security.Authorization.Roles.Role", null)
                                .WithMany()
                                .HasForeignKey("RoleId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_user");

                            b1.HasData(
                                new
                                {
                                    id = 1L,
                                    RoleId = 1L,
                                    id_user = 1L
                                });
                        });

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.CouponAggregate.ValueObjects.Restrictions.CategoryRestriction", b =>
                {
                    b.OwnsMany("Domain.CouponAggregate.ValueObjects.CouponCategory", "CategoriesAllowed", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_category");

                            b1.Property<long>("id_restriction_category")
                                .HasColumnType("bigint")
                                .HasColumnName("id_restriction_category");

                            b1.HasKey("id");

                            b1.HasIndex("CategoryId");

                            b1.HasIndex("id_restriction_category");

                            b1.ToTable("restriction_categories_allowed_categories", (string)null);

                            b1.HasOne("Domain.CategoryAggregate.Category", null)
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_restriction_category");
                        });

                    b.OwnsMany("Domain.CouponAggregate.ValueObjects.CouponProduct", "ProductsFromCategoryNotAllowed", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<long>("id_restriction_category")
                                .HasColumnType("bigint")
                                .HasColumnName("id_restriction_category");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_restriction_category");

                            b1.ToTable("restriction_products_not_allowed_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_restriction_category");
                        });

                    b.Navigation("CategoriesAllowed");

                    b.Navigation("ProductsFromCategoryNotAllowed");
                });

            modelBuilder.Entity("Domain.CouponAggregate.ValueObjects.Restrictions.ProductRestriction", b =>
                {
                    b.OwnsMany("Domain.CouponAggregate.ValueObjects.CouponProduct", "ProductsAllowed", b1 =>
                        {
                            b1.Property<long>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("id"));

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id_product");

                            b1.Property<long>("id_restriction_product")
                                .HasColumnType("bigint")
                                .HasColumnName("id_restriction_product");

                            b1.HasKey("id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("id_restriction_product");

                            b1.ToTable("restriction_products_allowed_products", (string)null);

                            b1.HasOne("Domain.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("id_restriction_product");
                        });

                    b.Navigation("ProductsAllowed");
                });

            modelBuilder.Entity("Domain.CouponAggregate.Coupon", b =>
                {
                    b.Navigation("Restrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
